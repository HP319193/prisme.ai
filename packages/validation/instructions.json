{
  "emit": {
    "type": "object",
    "required": [
      "emit"
    ],
    "maxProperties": 1,
    "properties": {
      "emit": {
        "type": "object",
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "type": "string",
            "example": "prismeaiMessenger.message"
          },
          "payload": {}
        }
      }
    }
  },
  "wait": {
    "type": "object",
    "required": [
      "wait"
    ],
    "maxProperties": 1,
    "properties": {
      "wait": {
        "type": "object",
        "required": [
          "oneOf"
        ],
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "event"
              ],
              "properties": {
                "event": {
                  "type": "string",
                  "example": "prismeaiMessenger.message"
                },
                "filters": {
                  "type": "object",
                  "description": "Only match the next event fulfilling these filters. Multiple filters will be joined with an 'AND' operator ",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "example": {
                    "automationSlug": "someId",
                    "someObjectField.someNestedField": "foo"
                  }
                },
                "cancelTriggers": {
                  "type": "boolean",
                  "description": "If true, do not send this event to the the usual triggers"
                }
              }
            }
          },
          "timeout": {
            "type": "number",
            "description": "After N seconds, timeout & outputs an empty result. Defaults to 20"
          },
          "output": {
            "type": "string",
            "description": "Will save the caught event inside this variable",
            "example": "nameOfResultVariable"
          }
        }
      }
    }
  },
  "set": {
    "type": "object",
    "required": [
      "set"
    ],
    "maxProperties": 1,
    "properties": {
      "set": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Variable name, might be \"foo\", \"session.sessionScopedFoo\", \"global.globalScopedFoo\", \"user.userScopedFoo\", ..."
          },
          "value": {
            "description": "variable value"
          }
        }
      }
    }
  },
  "delete": {
    "type": "object",
    "required": [
      "delete"
    ],
    "maxProperties": 1,
    "properties": {
      "delete": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Variable name to remove"
          }
        }
      }
    }
  },
  "conditions": {
    "type": "object",
    "required": [
      "default"
    ],
    "properties": {
      "default": {
        "type": "array"
      }
    },
    "additionalProperties": {
      "type": "array"
    },
    "minProperties": 2
  },
  "repeat": {
    "type": "object",
    "required": [
      "repeat"
    ],
    "maxProperties": 1,
    "properties": {
      "repeat": {
        "type": "object",
        "oneOf": [
          {
            "required": [
              "on",
              "do"
            ],
            "properties": {
              "on": {
                "type": "string"
              },
              "do": {
                "type": "array",
                "hidden": true
              }
            }
          },
          {
            "required": [
              "until",
              "do"
            ],
            "properties": {
              "until": {
                "type": "number"
              },
              "do": {
                "type": "array",
                "hidden": true
              }
            }
          }
        ],
        "description": "One of \"on\" or \"until\" is required"
      }
    }
  },
  "all": {
    "type": "object",
    "required": [
      "all"
    ],
    "maxProperties": 1,
    "properties": {
      "all": {
        "description": "Execute each instruction in parallel. Pause current automation execution until all instructions are processed.",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  "break": {
    "type": "object",
    "required": [
      "break"
    ],
    "maxProperties": 1,
    "properties": {
      "break": {
        "description": "Stop current automation execution. Have one option that allow a break to break all parent automations.",
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "all",
              "automation"
            ],
            "description": "The scope argument defines in which scope the break will take effect. It only breaks the current automation by default, it can also break all parent automations. More options might become available in the future."
          }
        }
      }
    }
  },
  "fetch": {
    "type": "object",
    "required": [
      "fetch"
    ],
    "maxProperties": 1,
    "properties": {
      "fetch": {
        "description": "Send an HTTP request",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "patch",
              "delete"
            ]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "query": {
            "type": "object",
            "description": "Object defining querystring parameters"
          },
          "body": {
            "description": "HTTP request body"
          },
          "multipart": {
            "description": "Sends a multipart/form-data HTTP request",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "fieldname",
                "value"
              ],
              "properties": {
                "fieldname": {
                  "type": "string"
                },
                "value": {
                  "type": "string",
                  "description": "Must be a string. Raw files must be given as base64"
                },
                "filename": {
                  "type": "string",
                  "description": "Filename is required when value is a base64 encoded file"
                },
                "contentType": {
                  "type": "string",
                  "description": "Optional MIME content-type"
                }
              }
            }
          },
          "output": {
            "type": "string",
            "description": "Name of the variable which will hold the result"
          }
        }
      }
    }
  },
  "comment": {
    "type": "object",
    "required": [
      "comment"
    ],
    "maxProperties": 1,
    "properties": {
      "comment": {
        "description": "Do nothing but display a comment in instructions list",
        "type": "string"
      }
    }
  }
}