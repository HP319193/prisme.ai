{
  "emit": {
    "type": "object",
    "required": [
      "emit"
    ],
    "maxProperties": 1,
    "properties": {
      "emit": {
        "type": "object",
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "type": "string",
            "example": "prismeaiMessenger.message"
          },
          "payload": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    }
  },
  "wait": {
    "type": "object",
    "required": [
      "wait"
    ],
    "maxProperties": 1,
    "properties": {
      "wait": {
        "type": "object",
        "required": [
          "oneOf"
        ],
        "properties": {
          "oneOf": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "event"
              ],
              "properties": {
                "event": {
                  "type": "string",
                  "example": "prismeaiMessenger.message"
                },
                "filters": {
                  "type": "object",
                  "description": "Only match the next event fulfilling these filters. Multiple filters will be joined with an 'AND' operator ",
                  "additionalProperties": true,
                  "example": {
                    "automationSlug": "someId",
                    "someObjectField.someNestedField": "foo"
                  }
                },
                "cancelTriggers": {
                  "type": "boolean",
                  "description": "If true, do not send this event to the the usual triggers"
                }
              }
            }
          },
          "timeout": {
            "type": "number",
            "description": "After N seconds, timeout & outputs an empty result. Defaults to 20"
          },
          "output": {
            "type": "string",
            "description": "Will save the caught event inside this variable",
            "example": "nameOfResultVariable"
          }
        }
      }
    }
  },
  "set": {
    "type": "object",
    "required": [
      "set"
    ],
    "maxProperties": 1,
    "properties": {
      "set": {
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Variable name, might be \"foo\", \"session.sessionScopedFoo\", \"global.globalScopedFoo\", \"user.userScopedFoo\", ..."
          },
          "value": {
            "type": "object",
            "description": "variable value",
            "additionalProperties": true
          },
          "lifespan": {
            "description": "Rules defining when a variable should be automatically removed",
            "properties": {
              "messages": {
                "type": "number",
                "description": "Number of user messages sent before automatically removing this variable"
              },
              "seconds": {
                "type": "number",
                "description": "Number of seconds elapsed since this variable initialization, before automatically removing it"
              }
            }
          }
        }
      }
    }
  },
  "delete": {
    "type": "object",
    "required": [
      "delete"
    ],
    "maxProperties": 1,
    "properties": {
      "delete": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Variable name to remove"
          }
        }
      }
    }
  },
  "conditions": {
    "type": "object",
    "required": [
      "default"
    ],
    "properties": {
      "default": {
        "type": "array"
      }
    },
    "additionalProperties": {
      "type": "array"
    },
    "minProperties": 2
  },
  "repeat": {
    "type": "object",
    "required": [
      "repeat"
    ],
    "maxProperties": 1,
    "properties": {
      "repeat": {
        "oneOf": [
          {
            "required": [
              "on",
              "do"
            ]
          },
          {
            "required": [
              "until",
              "do"
            ]
          }
        ],
        "description": "One of \"on\" or \"until\" is required",
        "properties": {
          "on": {
            "type": "string"
          },
          "until": {
            "type": "number"
          },
          "do": {
            "type": "array"
          }
        }
      }
    }
  },
  "all": {
    "type": "object",
    "required": [
      "all"
    ],
    "maxProperties": 1,
    "properties": {
      "all": {
        "description": "Execute each instruction in parallel. Pause current automation execution until all instructions are processed.",
        "type": "array",
        "items": {
          "type": "object"
        }
      }
    }
  },
  "break": {
    "type": "object",
    "required": [
      "break"
    ],
    "maxProperties": 1,
    "properties": {
      "break": {
        "description": "Stop current automation execution. Have one option that allow a break to break all parent automations.",
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "all",
              "automation"
            ],
            "description": "The scope argument defines in which scope the break will take effect. It only breaks the current automation by default, it can also break all parent automations. More options might become available in the future."
          }
        }
      }
    }
  },
  "fetch": {
    "type": "object",
    "required": [
      "fetch"
    ],
    "maxProperties": 1,
    "properties": {
      "fetch": {
        "description": "Send an HTTP request",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "patch",
              "delete"
            ]
          },
          "headers": {
            "type": "object",
            "additionalProperties": true
          },
          "body": {
            "type": "object",
            "description": "HTTP request body",
            "additionalProperties": true
          },
          "output": {
            "type": "string",
            "description": "Name of the variable which will hold the result"
          }
        }
      }
    }
  }
}