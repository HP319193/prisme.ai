// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render 1`] = `
Object {
  "instance": null,
  "nodeType": "component",
  "props": Object {
    "onChange": [MockFunction],
    "value": Object {
      "properties": Object {
        "boolean": Object {
          "type": "boolean",
        },
        "lorem": Object {
          "properties": Object {
            "a": Object {
              "type": "string",
            },
            "b": Object {
              "items": Object {
                "items": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
                "type": "array",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        "number": Object {
          "type": "number",
        },
        "string": Object {
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "rendered": Object {
    "instance": null,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="flex flex-row"
        >
          <SchemaFormDescription
            className="flex flex-1 mr-2"
            text="schema.property.widget.description"
          >
            <Select
              label="schema.property.widget.label"
              onChange={[Function]}
              selectOptions={
                Array [
                  Object {
                    "label": <Tooltip
                      title="schema.widget.default_description"
                    >
                      schema.widget.default
                    </Tooltip>,
                    "value": "",
                  },
                ]
              }
              value=""
            />
          </SchemaFormDescription>
          <SchemaFormDescription
            className="flex flex-1"
            text="schema.property.type.description"
          >
            <Select
              label="schema.property.type.label"
              onChange={[Function]}
              selectOptions={
                Array [
                  Object {
                    "label": "schema.types.any",
                    "value": "",
                  },
                  Object {
                    "label": "schema.types.string",
                    "value": "string",
                  },
                  Object {
                    "label": "schema.types.localized_string",
                    "value": "localized:string",
                  },
                  Object {
                    "label": "schema.types.number",
                    "value": "number",
                  },
                  Object {
                    "label": "schema.types.localized_number",
                    "value": "localized:number",
                  },
                  Object {
                    "label": "schema.types.boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "schema.types.localized_boolean",
                    "value": "localized:boolean",
                  },
                  Object {
                    "label": "schema.types.object",
                    "value": "object",
                  },
                  Object {
                    "label": "schema.types.array",
                    "value": "array",
                  },
                ]
              }
              value="object"
            />
          </SchemaFormDescription>
        </div>,
        false,
        <LocalizedInput
          InputProps={
            Object {
              "label": "schema.property.title",
            }
          }
          iconMarginTop="2.3rem"
          onChange={[Function]}
          value=""
        />,
        <SchemaFormDescription
          text="schema.property.description.description"
        >
          <LocalizedInput
            InputProps={
              Object {
                "label": "schema.property.description.label",
              }
            }
            iconMarginTop="2.3rem"
            onChange={[Function]}
            value=""
          />
        </SchemaFormDescription>,
        <SchemaFormDescription
          text="schema.property.placeholder.description"
        >
          <LocalizedInput
            InputProps={
              Object {
                "label": "schema.property.placeholder.label",
              }
            }
            iconMarginTop="2.3rem"
            onChange={[Function]}
            value=""
          />
        </SchemaFormDescription>,
        false,
        <div
          className="flex flex-1 pl-4 border-l-[1px] border-gray-200"
        >
          <Properties
            onChange={[Function]}
            value={
              Object {
                "boolean": Object {
                  "type": "boolean",
                },
                "lorem": Object {
                  "properties": Object {
                    "a": Object {
                      "type": "string",
                    },
                    "b": Object {
                      "items": Object {
                        "items": Object {
                          "items": Object {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "type": "array",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "number": Object {
                  "type": "number",
                },
                "string": Object {
                  "type": "string",
                },
              }
            }
          />
        </div>,
      ],
      "className": "flex flex-1 flex-col space-y-5",
    },
    "rendered": Array [
      Object {
        "instance": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <SchemaFormDescription
              className="flex flex-1 mr-2"
              text="schema.property.widget.description"
            >
              <Select
                label="schema.property.widget.label"
                onChange={[Function]}
                selectOptions={
                  Array [
                    Object {
                      "label": <Tooltip
                        title="schema.widget.default_description"
                      >
                        schema.widget.default
                      </Tooltip>,
                      "value": "",
                    },
                  ]
                }
                value=""
              />
            </SchemaFormDescription>,
            <SchemaFormDescription
              className="flex flex-1"
              text="schema.property.type.description"
            >
              <Select
                label="schema.property.type.label"
                onChange={[Function]}
                selectOptions={
                  Array [
                    Object {
                      "label": "schema.types.any",
                      "value": "",
                    },
                    Object {
                      "label": "schema.types.string",
                      "value": "string",
                    },
                    Object {
                      "label": "schema.types.localized_string",
                      "value": "localized:string",
                    },
                    Object {
                      "label": "schema.types.number",
                      "value": "number",
                    },
                    Object {
                      "label": "schema.types.localized_number",
                      "value": "localized:number",
                    },
                    Object {
                      "label": "schema.types.boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "schema.types.localized_boolean",
                      "value": "localized:boolean",
                    },
                    Object {
                      "label": "schema.types.object",
                      "value": "object",
                    },
                    Object {
                      "label": "schema.types.array",
                      "value": "array",
                    },
                  ]
                }
                value="object"
              />
            </SchemaFormDescription>,
          ],
          "className": "flex flex-row",
        },
        "rendered": Array [
          Object {
            "instance": null,
            "nodeType": "component",
            "props": Object {
              "children": <Select
                label="schema.property.widget.label"
                onChange={[Function]}
                selectOptions={
                  Array [
                    Object {
                      "label": <Tooltip
                        title="schema.widget.default_description"
                      >
                        schema.widget.default
                      </Tooltip>,
                      "value": "",
                    },
                  ]
                }
                value=""
              />,
              "className": "flex flex-1 mr-2",
              "text": "schema.property.widget.description",
            },
            "rendered": Object {
              "instance": null,
              "nodeType": "component",
              "props": Object {
                "label": "schema.property.widget.label",
                "onChange": [Function],
                "selectOptions": Array [
                  Object {
                    "label": <Tooltip
                      title="schema.widget.default_description"
                    >
                      schema.widget.default
                    </Tooltip>,
                    "value": "",
                  },
                ],
                "value": "",
              },
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "nodeType": "component",
            "props": Object {
              "children": <Select
                label="schema.property.type.label"
                onChange={[Function]}
                selectOptions={
                  Array [
                    Object {
                      "label": "schema.types.any",
                      "value": "",
                    },
                    Object {
                      "label": "schema.types.string",
                      "value": "string",
                    },
                    Object {
                      "label": "schema.types.localized_string",
                      "value": "localized:string",
                    },
                    Object {
                      "label": "schema.types.number",
                      "value": "number",
                    },
                    Object {
                      "label": "schema.types.localized_number",
                      "value": "localized:number",
                    },
                    Object {
                      "label": "schema.types.boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "schema.types.localized_boolean",
                      "value": "localized:boolean",
                    },
                    Object {
                      "label": "schema.types.object",
                      "value": "object",
                    },
                    Object {
                      "label": "schema.types.array",
                      "value": "array",
                    },
                  ]
                }
                value="object"
              />,
              "className": "flex flex-1",
              "text": "schema.property.type.description",
            },
            "rendered": Object {
              "instance": null,
              "nodeType": "component",
              "props": Object {
                "label": "schema.property.type.label",
                "onChange": [Function],
                "selectOptions": Array [
                  Object {
                    "label": "schema.types.any",
                    "value": "",
                  },
                  Object {
                    "label": "schema.types.string",
                    "value": "string",
                  },
                  Object {
                    "label": "schema.types.localized_string",
                    "value": "localized:string",
                  },
                  Object {
                    "label": "schema.types.number",
                    "value": "number",
                  },
                  Object {
                    "label": "schema.types.localized_number",
                    "value": "localized:number",
                  },
                  Object {
                    "label": "schema.types.boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "schema.types.localized_boolean",
                    "value": "localized:boolean",
                  },
                  Object {
                    "label": "schema.types.object",
                    "value": "object",
                  },
                  Object {
                    "label": "schema.types.array",
                    "value": "array",
                  },
                ],
                "value": "object",
              },
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "nodeType": "component",
        "props": Object {
          "InputProps": Object {
            "label": "schema.property.title",
          },
          "iconMarginTop": "2.3rem",
          "onChange": [Function],
          "value": "",
        },
        "rendered": Object {
          "instance": null,
          "nodeType": "component",
          "props": Object {
            "InputProps": Object {
              "label": "schema.property.title",
            },
            "addLangTooltip": "languages.add.tooltip",
            "availableLangsTitle": "languages.available.title",
            "deleteTooltip": "languages.delete.tooltip",
            "iconMarginTop": "2.3rem",
            "onChange": [Function],
            "setLangTooltip": "languages.set.tooltip",
            "setLangsTitle": "languages.set.title",
            "value": "",
          },
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "nodeType": "component",
        "props": Object {
          "children": <LocalizedInput
            InputProps={
              Object {
                "label": "schema.property.description.label",
              }
            }
            iconMarginTop="2.3rem"
            onChange={[Function]}
            value=""
          />,
          "text": "schema.property.description.description",
        },
        "rendered": Object {
          "instance": null,
          "nodeType": "component",
          "props": Object {
            "InputProps": Object {
              "label": "schema.property.description.label",
            },
            "iconMarginTop": "2.3rem",
            "onChange": [Function],
            "value": "",
          },
          "rendered": Object {
            "instance": null,
            "nodeType": "component",
            "props": Object {
              "InputProps": Object {
                "label": "schema.property.description.label",
              },
              "addLangTooltip": "languages.add.tooltip",
              "availableLangsTitle": "languages.available.title",
              "deleteTooltip": "languages.delete.tooltip",
              "iconMarginTop": "2.3rem",
              "onChange": [Function],
              "setLangTooltip": "languages.set.tooltip",
              "setLangsTitle": "languages.set.title",
              "value": "",
            },
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "nodeType": "component",
        "props": Object {
          "children": <LocalizedInput
            InputProps={
              Object {
                "label": "schema.property.placeholder.label",
              }
            }
            iconMarginTop="2.3rem"
            onChange={[Function]}
            value=""
          />,
          "text": "schema.property.placeholder.description",
        },
        "rendered": Object {
          "instance": null,
          "nodeType": "component",
          "props": Object {
            "InputProps": Object {
              "label": "schema.property.placeholder.label",
            },
            "iconMarginTop": "2.3rem",
            "onChange": [Function],
            "value": "",
          },
          "rendered": Object {
            "instance": null,
            "nodeType": "component",
            "props": Object {
              "InputProps": Object {
                "label": "schema.property.placeholder.label",
              },
              "addLangTooltip": "languages.add.tooltip",
              "availableLangsTitle": "languages.available.title",
              "deleteTooltip": "languages.delete.tooltip",
              "iconMarginTop": "2.3rem",
              "onChange": [Function],
              "setLangTooltip": "languages.set.tooltip",
              "setLangsTitle": "languages.set.title",
              "value": "",
            },
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "nodeType": "host",
        "props": Object {
          "children": <Properties
            onChange={[Function]}
            value={
              Object {
                "boolean": Object {
                  "type": "boolean",
                },
                "lorem": Object {
                  "properties": Object {
                    "a": Object {
                      "type": "string",
                    },
                    "b": Object {
                      "items": Object {
                        "items": Object {
                          "items": Object {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "type": "array",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "number": Object {
                  "type": "number",
                },
                "string": Object {
                  "type": "string",
                },
              }
            }
          />,
          "className": "flex flex-1 pl-4 border-l-[1px] border-gray-200",
        },
        "rendered": Array [
          Object {
            "instance": null,
            "nodeType": "component",
            "props": Object {
              "onChange": [Function],
              "value": Object {
                "boolean": Object {
                  "type": "boolean",
                },
                "lorem": Object {
                  "properties": Object {
                    "a": Object {
                      "type": "string",
                    },
                    "b": Object {
                      "items": Object {
                        "items": Object {
                          "items": Object {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "type": "array",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "number": Object {
                  "type": "number",
                },
                "string": Object {
                  "type": "string",
                },
              },
            },
            "rendered": Object {
              "instance": null,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  Array [
                    <Collapse
                      expandIconPosition="start"
                      items={
                        Array [
                          Object {
                            "content": <div>
                              <div
                                className="pl-4 border-l-[1px] border-x-gray-200"
                              >
                                <SchemaFormBuilder
                                  onChange={[Function]}
                                  value={
                                    Object {
                                      "type": "string",
                                    }
                                  }
                                />
                              </div>
                              <Divider />
                            </div>,
                            "isEmpty": false,
                            "label": <div
                              className="relative flex flex-1"
                              onClick={[Function]}
                            >
                              <Input
                                containerClassName="flex flex-1"
                                label="schema.property.name"
                                onChange={[Function]}
                                pattern="^[a-zA-Z0-9_]+$"
                                value="string"
                              />
                              <Tooltip
                                placement="left"
                                title="schema.property.delete"
                              >
                                <button
                                  className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <DeleteOutlined />
                                </button>
                              </Tooltip>
                            </div>,
                          },
                        ]
                      }
                    />,
                    <Collapse
                      expandIconPosition="start"
                      items={
                        Array [
                          Object {
                            "content": <div>
                              <div
                                className="pl-4 border-l-[1px] border-x-gray-200"
                              >
                                <SchemaFormBuilder
                                  onChange={[Function]}
                                  value={
                                    Object {
                                      "type": "number",
                                    }
                                  }
                                />
                              </div>
                              <Divider />
                            </div>,
                            "isEmpty": false,
                            "label": <div
                              className="relative flex flex-1"
                              onClick={[Function]}
                            >
                              <Input
                                containerClassName="flex flex-1"
                                label="schema.property.name"
                                onChange={[Function]}
                                pattern="^[a-zA-Z0-9_]+$"
                                value="number"
                              />
                              <Tooltip
                                placement="left"
                                title="schema.property.delete"
                              >
                                <button
                                  className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <DeleteOutlined />
                                </button>
                              </Tooltip>
                            </div>,
                          },
                        ]
                      }
                    />,
                    <Collapse
                      expandIconPosition="start"
                      items={
                        Array [
                          Object {
                            "content": <div>
                              <div
                                className="pl-4 border-l-[1px] border-x-gray-200"
                              >
                                <SchemaFormBuilder
                                  onChange={[Function]}
                                  value={
                                    Object {
                                      "type": "boolean",
                                    }
                                  }
                                />
                              </div>
                              <Divider />
                            </div>,
                            "isEmpty": false,
                            "label": <div
                              className="relative flex flex-1"
                              onClick={[Function]}
                            >
                              <Input
                                containerClassName="flex flex-1"
                                label="schema.property.name"
                                onChange={[Function]}
                                pattern="^[a-zA-Z0-9_]+$"
                                value="boolean"
                              />
                              <Tooltip
                                placement="left"
                                title="schema.property.delete"
                              >
                                <button
                                  className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <DeleteOutlined />
                                </button>
                              </Tooltip>
                            </div>,
                          },
                        ]
                      }
                    />,
                    <Collapse
                      expandIconPosition="start"
                      items={
                        Array [
                          Object {
                            "content": <div>
                              <div
                                className="pl-4 border-l-[1px] border-x-gray-200"
                              >
                                <SchemaFormBuilder
                                  onChange={[Function]}
                                  value={
                                    Object {
                                      "properties": Object {
                                        "a": Object {
                                          "type": "string",
                                        },
                                        "b": Object {
                                          "items": Object {
                                            "items": Object {
                                              "items": Object {
                                                "type": "string",
                                              },
                                              "type": "array",
                                            },
                                            "type": "array",
                                          },
                                          "type": "array",
                                        },
                                      },
                                      "type": "object",
                                    }
                                  }
                                />
                              </div>
                              <Divider />
                            </div>,
                            "isEmpty": false,
                            "label": <div
                              className="relative flex flex-1"
                              onClick={[Function]}
                            >
                              <Input
                                containerClassName="flex flex-1"
                                label="schema.property.name"
                                onChange={[Function]}
                                pattern="^[a-zA-Z0-9_]+$"
                                value="lorem"
                              />
                              <Tooltip
                                placement="left"
                                title="schema.property.delete"
                              >
                                <button
                                  className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <DeleteOutlined />
                                </button>
                              </Tooltip>
                            </div>,
                          },
                        ]
                      }
                    />,
                  ],
                  <Button
                    onClick={[Function]}
                  >
                    schema.property.add
                  </Button>,
                ],
                "className": "flex flex-1 flex-col centered-collapse",
              },
              "rendered": Array [
                Object {
                  "instance": null,
                  "nodeType": "component",
                  "props": Object {
                    "expandIconPosition": "start",
                    "icon": undefined,
                    "items": Array [
                      Object {
                        "content": <div>
                          <div
                            className="pl-4 border-l-[1px] border-x-gray-200"
                          >
                            <SchemaFormBuilder
                              onChange={[Function]}
                              value={
                                Object {
                                  "type": "string",
                                }
                              }
                            />
                          </div>
                          <Divider />
                        </div>,
                        "isEmpty": false,
                        "label": <div
                          className="relative flex flex-1"
                          onClick={[Function]}
                        >
                          <Input
                            containerClassName="flex flex-1"
                            label="schema.property.name"
                            onChange={[Function]}
                            pattern="^[a-zA-Z0-9_]+$"
                            value="string"
                          />
                          <Tooltip
                            placement="left"
                            title="schema.property.delete"
                          >
                            <button
                              className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                              onClick={[Function]}
                              type="button"
                            >
                              <DeleteOutlined />
                            </button>
                          </Tooltip>
                        </div>,
                      },
                    ],
                  },
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "nodeType": "component",
                  "props": Object {
                    "expandIconPosition": "start",
                    "icon": undefined,
                    "items": Array [
                      Object {
                        "content": <div>
                          <div
                            className="pl-4 border-l-[1px] border-x-gray-200"
                          >
                            <SchemaFormBuilder
                              onChange={[Function]}
                              value={
                                Object {
                                  "type": "number",
                                }
                              }
                            />
                          </div>
                          <Divider />
                        </div>,
                        "isEmpty": false,
                        "label": <div
                          className="relative flex flex-1"
                          onClick={[Function]}
                        >
                          <Input
                            containerClassName="flex flex-1"
                            label="schema.property.name"
                            onChange={[Function]}
                            pattern="^[a-zA-Z0-9_]+$"
                            value="number"
                          />
                          <Tooltip
                            placement="left"
                            title="schema.property.delete"
                          >
                            <button
                              className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                              onClick={[Function]}
                              type="button"
                            >
                              <DeleteOutlined />
                            </button>
                          </Tooltip>
                        </div>,
                      },
                    ],
                  },
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "nodeType": "component",
                  "props": Object {
                    "expandIconPosition": "start",
                    "icon": undefined,
                    "items": Array [
                      Object {
                        "content": <div>
                          <div
                            className="pl-4 border-l-[1px] border-x-gray-200"
                          >
                            <SchemaFormBuilder
                              onChange={[Function]}
                              value={
                                Object {
                                  "type": "boolean",
                                }
                              }
                            />
                          </div>
                          <Divider />
                        </div>,
                        "isEmpty": false,
                        "label": <div
                          className="relative flex flex-1"
                          onClick={[Function]}
                        >
                          <Input
                            containerClassName="flex flex-1"
                            label="schema.property.name"
                            onChange={[Function]}
                            pattern="^[a-zA-Z0-9_]+$"
                            value="boolean"
                          />
                          <Tooltip
                            placement="left"
                            title="schema.property.delete"
                          >
                            <button
                              className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                              onClick={[Function]}
                              type="button"
                            >
                              <DeleteOutlined />
                            </button>
                          </Tooltip>
                        </div>,
                      },
                    ],
                  },
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "nodeType": "component",
                  "props": Object {
                    "expandIconPosition": "start",
                    "icon": undefined,
                    "items": Array [
                      Object {
                        "content": <div>
                          <div
                            className="pl-4 border-l-[1px] border-x-gray-200"
                          >
                            <SchemaFormBuilder
                              onChange={[Function]}
                              value={
                                Object {
                                  "properties": Object {
                                    "a": Object {
                                      "type": "string",
                                    },
                                    "b": Object {
                                      "items": Object {
                                        "items": Object {
                                          "items": Object {
                                            "type": "string",
                                          },
                                          "type": "array",
                                        },
                                        "type": "array",
                                      },
                                      "type": "array",
                                    },
                                  },
                                  "type": "object",
                                }
                              }
                            />
                          </div>
                          <Divider />
                        </div>,
                        "isEmpty": false,
                        "label": <div
                          className="relative flex flex-1"
                          onClick={[Function]}
                        >
                          <Input
                            containerClassName="flex flex-1"
                            label="schema.property.name"
                            onChange={[Function]}
                            pattern="^[a-zA-Z0-9_]+$"
                            value="lorem"
                          />
                          <Tooltip
                            placement="left"
                            title="schema.property.delete"
                          >
                            <button
                              className="absolute top-[2.8rem] right-3 text-gray hover:text-orange-500"
                              onClick={[Function]}
                              type="button"
                            >
                              <DeleteOutlined />
                            </button>
                          </Tooltip>
                        </div>,
                      },
                    ],
                  },
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "nodeType": "component",
                  "props": Object {
                    "children": "schema.property.add",
                    "onClick": [Function],
                  },
                  "rendered": "schema.property.add",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  "type": [Function],
}
`;
