name: instructions
id: instructions
imports:
  basicApp:
    appSlug: basicApp
config:
  schema:
    password:
      type: string
      secret: true
  value:
    petite: maison
    password: myAmazingAndPrivatePassword

automations:
  noop:
    name: noop
    do: []
    output:
      session: '{{session}}'
      user: '{{user}}'
      run: '{{run}}'
      field: '{{local}}'
    when:
      endpoint: true
      events:
        - noop

  mySet:
    name: mySet
    do:
      - set:
          name: '{{body.field}}'
          value: '{{body.value}}'
    output:
      session: '{{session}}'
      user: '{{user}}'
      run: '{{run}}'
      field: '{{{{body.field}}}}'
    when:
      endpoint: true

  myMergeSet:
    name: mySet
    do:
      - set:
          name: 'basicMerge'
          value:
            firstName: Martin
      - set:
          name: 'basicMerge'
          type: merge
          value:
            age: 25 # this should be merged into previous object
      - set:
          name: 'basicMerge'
          type: merge
          value: 'erg' # This should be ignored
      - set:
          name: 'basicMerge'
          type: merge
          value: [] # This should be ignored
      - set:
          name: 'basicMerge'
          type: merge
          value: # This should be ignored

      - set:
          name: 'arrayMerge'
          value:
            - un
      - set:
          name: 'arrayMerge'
          type: merge
          value:
            - deux
            - trois
      - set:
          name: 'arrayMerge'
          type: merge
          value: quatre
      - set:
          name: 'arrayMerge'
          type: merge
          value:
            cinq: 5

      - set:
          name: brokenObj
          value:
      - set:
          name: brokenObj
          type: merge
          value:
            is: fixed
    output:
      basicMerge: '{{basicMerge}}'
      arrayMerge: '{{arrayMerge}}'
      brokenObj: '{{brokenObj}}'
    when:
      endpoint: true

  setUserAndEmit:
    name: mySet
    do:
      - set:
          name: 'user.id'
          value: '{{body.userId}}'
      - emit:
          event: cascadingWithNewUser
          payload: {}
    output:
      session: '{{session}}'
      user: '{{user}}'
      run: '{{run}}'
    when:
      endpoint: true


  setAndNoop:
    name: set
    do:
      - set:
          name: '{{body.field}}'
          value: '{{body.value}}'
      - noop:
          output: output
    output: '{{output}}'
    when:
      endpoint: true


  readUserVarSetByChildAutomation:
    name: readUserVarSetByChildAutomation
    when:
      endpoint: true
    do:
      - setAndNoop:
          body:
            field: user.myBro
            value: bruh
    output: '{{user.myBro}}'


  setAndEmitNoop:
    name: setAndEmitNoop
    when:
      endpoint: true
    do:
      - set:
          name: '{{body.field}}'
          value: '{{body.value}}'
      - emit:
          event: noop
          payload:
            name: '{{body.field}}'
            value: '{{body.value}}'
    output:
      session: '{{session}}'
      user: '{{user}}'
      run: '{{run}}'

  setConfig:
    name: setConfig
    when:
      endpoint: true
    do:
      - set:
          name: config.foo
          value: bar

  myDelete:
    name: myDelete
    do:
      - delete:
          name: '{{body.field}}'
    output:
      session: '{{session}}'
      user: '{{user}}'
      run: '{{run}}'
      field: '{{{{body.field}}}}'
    when:
      endpoint: true

  simpleRepeatUntil:
    name: simpleRepeatUntil
    do:
      - repeat:
          until: 4
          do:
            - set:
                name: numbers[]
                value: '{{item}}'
    output: '{{numbers}}'
    when:
      endpoint: true

  simpleRepeatOnAndUntil:
    name: simpleRepeatOnAndUntil
    do:
      - set:
          name: numbers
          value:
            - un
            - deux
            - trois
            - quatre
      - repeat:
          on: '{{numbers}}'
          until: 2
          do:
            - set:
                name: output[]
                value: '{{item}}'
    output: '{{output}}'
    when:
      endpoint: true

  transformListToObject:
    name: transformListToObject
    do:
      - set:
          name: myList
          value:
            - un
            - deux
            - trois
            - quatre
      - repeat:
          on: '{{myList}}'
          do:
            - set:
                name: myObj[{{item}}]
                value: '{{$index}}'
    output: '{{myObj}}'
    when:
      endpoint: true

  conditionalOutput:
    name: conditionalOutput
    do:
      - conditions:
          '{{body.age}} > 80':
            - set:
                name: output
                value: "Papi !"
          '{{body.age}} < 12':
            - set:
                name: output
                value: "Marmot !"
          default:
            - set:
                name: output
                value: "Toujours dans la force de l'age !"
    output: '{{output}}'
    when:
      endpoint: true

  conditionallyTransformListToObject:
    name: conditionallyTransformListToObject
    do:
      - set:
          name: myList
          value:
            - un
            - deux
      - conditions:
          '{{myList.length}} > 1':
            - set:
                name: myList
                value:
                  - un
                  - deux
                  - trois
                  - quatre
            - repeat:
                on: '{{myList}}'
                do:
                  - conditions:
                      '{{item}} == "trois"':
                        - set:
                            name: item
                            value: "{{item}} blouh"
                  - set:
                      name: myObj[{{item}}]
                      value: true
    output: '{{myObj}}'
    when:
      endpoint: true

  simpleWait:
    name: simpleWait
    when:
      endpoint: true
    do:
      - wait:
          oneOf:
            - event: '{{body.event}}'
              filters: '{{body.filters}}'
              cancelTriggers: '{{body.cancelTriggers}}'
          output: waited
    output: '{{waited.payload}}'

  simpleBreak:
    name: simpleBreak
    when:
      endpoint: true
    do:
      - set:
          name: output
          value: beforeBreak
      - break:
          scope: '{{body.scope}}'
      - set:
          name: output
          value: afterBreak
    output: '{{output}}'


  breakFromChildAutomation:
    name: breakFromChildAutomation
    when:
      endpoint: true
    do:
      - set:
          name: output
          value: beforeBreak
      - simpleBreak:
          body:
            scope: '{{body.scope}}'
      - set:
          name: output
          value: afterBreak
    output: '{{output}}'

  testRunContext:
    name: testRunContext
    when:
      endpoint: true
    do:
      - set:
          name: run.runs[]
          value:
            appSlug: '{{run.appSlug}}'
            appInstanceSlug: '{{run.appInstanceSlug}}'
            appInstanceFullSlug: '{{run.appInstanceFullSlug}}'
            automationSlug: '{{run.automationSlug}}'
            parentAppSlug: '{{run.parentAppSlug}}'
      - basicApp.testRunContext: {}
    output: '{{run.runs}}'

  testWorkspaceContext:
    name: testWorkspaceContext
    when:
      endpoint: true
    do: []
    output: '{{$workspace}}'

  secretArguments:
    name: secretArguments
    output: '{{body.token}}'
    when:
      endpoint: true
    arguments:
      body:
        type: object
        properties:
          token:
            type: string
            secret: true
      rootToken:
        type: string
        secret: true
    do:
      - secretArgumentsBis:
          data:
            token: '{{body.token}}'
          hello: 'world'

  secretArgumentsBis:
    name: secretArgumentsBis
    output:
      token: '{{data.token}}'
      hello: '{{hello}}'
      password: '{{config.password}}'
    do: []


  runSynchronization:
    name: runSynchronization
    when:
      endpoint: true
    do:
      - set:
          name: user.id
          value: martin
      - emit:
          event: myUser
          payload:
            user: '{{user}}'
            session: "{{session}}"
      - emit:
          event: runSynchronization
          payload:
            foo: bar
          output: emittedIntentEvent
      - wait:
          oneOf:
            - event: runtime.automations.executed
              filters:
                payload.trigger.id: '{{emittedIntentEvent.id}}'
          output: event
    output:
      run: '{{run.foo}}'

  runSynchronizationWith:
    name: runSynchronizationWith
    do:
      - set:
          name: run.foo[]
          value: "{{payload.foo}}"
    output: '{{bla}}'
    when:
      events:
        - runSynchronization
      endpoint: true



