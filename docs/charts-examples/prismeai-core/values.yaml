# Configuration shared by all services
global:
  repository:
    create: false

  broker:
    driver: redis # Driver used
    url: redis://localhost:6379/1 # URL to the broker # REQUIRED
    password: "" # Broker password # REQUIRED
    maxLen: "700" # Default redis streams maxlen (how many events per stream stay in cache before being dropped, whether they have been read or not)

  apiUrl: "" # Public API URL, should contain the "/v2", example : https://api.prisme.ai/v2 # REQUIRED
  consoleUrl: "" # Public Console URL, example : https://studio.prisme.ai  # REQUIRED
  pagesHost: "" # Public Pages host, must begin with a dot. Every single pages built on the platform will be served this way "page-slug<pagesHost>", example : ".pages.prisme.ai" # REQUIRED

  oidc:
    clientRegistrationToken:
      valueFrom:
        secretKeyRef:
          name: oidc-provider
          key: clientRegistrationToken
    studioClientId:
      valueFrom:
        secretKeyRef:
          name: oidc-provider
          key: studioClientId
    studioClientSecret:
      valueFrom:
        secretKeyRef:
          name: oidc-provider
          key: studioClientSecret
    cookiesSignSecret:
      valueFrom:
        secretKeyRef:
          name: oidc-provider
          key: cookiesSignSecret


  internalApiKey: &INTERNAL_API_KEY
    valueFrom:
      secretKeyRef:
        name: internal-security
        key: apiKey

  storage:
    workspaces:
      # Configure where the workspaces models will be saved
      driver: FILESYSTEM # Available drivers: S3_LIKE, FILESYSTEM, AZURE_BLOB

      # REQUIRED if S3_LIKE
      s3_like_accessKey: ''
      s3_like_secretKey: ''
      s3_like_baseUrl: '' # Base public URL
      s3_like_bucketName: 'prismeai-models'
      s3_like_endpoint: ''

    uploads:
      # Configure where the user uploads will be saved
      driver: FILESYSTEM # Available drivers: S3_LIKE, FILESYSTEM

      # REQUIRED if S3_LIKE
      s3_like_accessKey: ''
      s3_like_secretKey: ''
      s3_like_baseUrl: '' # Base public URL
      s3_like_bucketName: 'prismeai-uploads'
      s3_like_endpoint: ''

    permissions:
      driver: mongoose # Driver used
      url: mongodb+srv://prisme:password@mongodbcluster.example/permissions?tls=true # Your MongoDB URI REQUIRED

    events:
      url: http://core-es:9200 # Data lake URL REQUIRED
      user: elastic
      password: '' # REQUIRED

########################################
# Service-specific configs
prismeai-workspaces:
  enabled: true

  image:
    tag: prod
  replicaCount: 1
  namespace: core
  resources:
    requests:
      memory: '300Mi'
      cpu: '0.5'
    limits:
      memory: '500Mi'
      cpu: '1'
  serviceAccount:
    create: true

  # Remove volumes & volumeMounts if global.storage.workspaces.driver is not FILESYSTEM
  volumes:
    - name: models
      persistentVolumeClaim:
        claimName: 'core-prismeai-workspaces-models'

  volumeMounts:
    - name: models
      mountPath: /data

  env:
    - name: NODE_OPTIONS
      value: '--max-old-space-size=300' # Keep it as 2/3 of memory limit
    - name: UPLOADS_MAX_SIZE
      value: '100000000' # 100MB

  hpa: &CORE_CPU_HPA
    create: true
    minReplicas: 1
    maxReplicas: 2
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageValue: '0.70'

prismeai-runtime:
  enabled: true

  image:
    tag: prod
  replicaCount: 1
  namespace: core
  resources: &resources
    requests:
      memory: '500Mi'
      cpu: '0.5'
    limits:
      memory: '800Mi'
      # cpu: '2'
  serviceAccount:
    create: true

  cache:
    contexts:
      driver: redis
      url: redis://localhost:6379/2
      password: ""

  # Remove volumes & volumeMounts if global.storage.workspaces.driver is not FILESYSTEM
  volumes:
    - name: models
      persistentVolumeClaim:
        claimName: 'core-prismeai-workspaces-models'

  volumeMounts:
    - name: models
      mountPath: /data

  env:
    - name: NODE_OPTIONS
      value: '--max-old-space-size=530' # Keep it as 2/3 of memory limit
    - &BROKER_EMIT_MAXLEN
      name: BROKER_EMIT_MAXLEN
      value: '1000000'
    - name: UPLOADS_MAX_SIZE
      value: '100000000' # 100MB

    ## App configs for enterprise features :
    - name: APP_CONFIG_CustomCode_apiUrl
      value: 'http://apps-prismeai-functions.apps.svc.cluster.local'
    - name: APP_CONFIG_NLU_apiUrl
      value: 'http://apps-prismeai-nlu.apps.svc.cluster.local'
    - name: APP_CONFIG_Crawler_apiUrl
      value: 'http://apps-prismeai-searchengine.apps.svc.cluster.local'
    - name: WORKSPACE_CONFIG_crawler_apiUrl
      value: 'http://apps-prismeai-searchengine.apps.svc.cluster.local'
    - name: APP_CONFIG_LLMOpen-Source_apiUrl
      value: 'http://apps-prismeai-llm.apps.svc.cluster.local'

    - name: APP_CONFIG_SendMail_apiKey # Optional
      value: ''
    - name: APP_CONFIG_SendMail_region
      value: 'https://api.eu.mailgun.net/'
    - name: APP_CONFIG_SendMail_domain
      value: ''

    - name: WORKSPACE_CONFIG_collection_mongoURI
      value: 'mongodb+srv://prisme:password@mongodbcluster.example/collections' # Note the path

    - name: WORKSPACE_CONFIG_ai-knowledge_redisUrl
      value: 'redis://localhost:6379/0' # RedisSearch database for LLM/embeddings
    - name: WORKSPACE_CONFIG_ai-knowledge_azureOpenaiApiKey
      value: ''
    - name: WORKSPACE_CONFIG_ai-knowledge_openaiApiKey
      value: ''
    - name: WORKSPACE_CONFIG_ai-knowledge-groqApiKey
      value: ""
    - name: WORKSPACE_CONFIG_ai-knowledge-chat_openaiApiKey
      value: ''

  hpa: *CORE_CPU_HPA

prismeai-events:
  enabled: true

  image:
    tag: prod
  replicaCount: 1
  namespace: core
  resources: &resources
    requests:
      memory: '200Mi'
      cpu: '0.5'
    limits:
      memory: '600Mi'
      # cpu: '2'
  serviceAccount:
    create: true

  volumes: []
  volumeMounts: []

  env:
    - name: NODE_OPTIONS
      value: '--max-old-space-size=400' # Keep it as 2/3 of memory limit
    - *BROKER_EMIT_MAXLEN
    - name: SOCKETIO_COOKIE_MAX_AGE
      value: '1200'
    - name: EVENTS_BUFFER_FLUSH_EVERY
      value: '100'
    - name: ELASTIC_SEARCH_TIMEOUT
      value: '10000ms' # Default 2sec too short for some requests which can easily exceeds 2sec anyway.
    # - name: EVENTS_STORAGE_NAMESPACE # Optional prefix for ES indexes, useful for sharing same ES cluster between different platforms
    #   value: ''

  # hpa: *CORE_CPU_HPA

  events:
    cleanupjob: true # Create a cronjob to call /cleanup API in order to regularly apply retention, clean unused & inactive workspaces (see EVENTS_CLEANUP_* vars)...

    # /cleanup API configuration :
    retention: 1080 # Delete events older than 3 years

    # delete all events from small & inactive workspaces :
    workspaceMaxEvents: 50 # with max N events
    workspaceInactivityDays: 30 # & inactive for N days

prismeai-console:
  enabled: true

  image:
    tag: prod
  replicaCount: 1
  namespace: core
  resources:
    requests:
      memory: '300Mi'
      cpu: '0.1'
    limits:
      memory: '1024Mi'
      # cpu: '1'
  serviceAccount:
    create: true

  # Custom config (Optional)
  suggestions: '' # Webhook to display suggestions
  products_endpoint: ''
  billingHome: ""
  billingUsage: ""
  hpa: *CORE_CPU_HPA
  tracking: ''

prismeai-pages:
  enabled: true

  image:
    tag: prod
  replicaCount: 1
  namespace: core
  resources:
    requests:
      memory: '512Mi'
      cpu: '0.1'
    limits:
      memory: '1024Mi'
      # cpu: '1'
  serviceAccount:
    create: true
  hpa: *CORE_CPU_HPA


  # env:
  #   - name: DISABLE_SSR
  #     value: 'true' # Disabling SSR tend to significantly improve pages performances & scaling

prismeai-api-gateway:
  enabled: true

  image:
    tag: prod
  namespace: core
  resources:
    requests:
      memory: '100Mi'
      cpu: '0.5'
    limits:
      memory: '500Mi'
      # cpu: '2'
  serviceAccount:
    create: true

  storage:
    users:
      driver: mongodb
      url: "mongodb+srv://prisme:password@mongodbcluster.example/users" # REQUIRED

    sessions:
      driver: redis
      url: redis://localhost:6379/3 # REQUIRED
      password: "" # REQUIRED

  config:
    admins: '' # List of emails which shall be considered as admin of the platform, they have read access to all the workspaces.
    services:
      functions:
        url: http://apps-prismeai-functions.apps.svc

  providers:
    mailgun:
      apiKey: '' # In order for the platform to send emails, please fill-in your mailgun API key.

  volumes: []
  volumeMounts: []

  env:
    - name: NODE_OPTIONS
      value: '--max-old-space-size=330' # Keep it as 2/3 of memory limit
    - name: UPLOADS_MAX_SIZE
      value: '100000000' # 100MB

    - name: EMAIL_FROM
      value: '"Prisme.ai" <no-reply@mg.prisme.ai>'

    # - name: EMAIL_VALIDATION_ENABLED # REQUIRED uncomment in order to create local accounts without providers.mailgun.apiKey configured
    #   value: false

  hpa: *CORE_CPU_HPA

extraObjects:
  # Remove this PVC if global.storage.workspaces.driver is not FILESYSTEM
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      finalizers:
        - kubernetes.io/pvc-protection
      name: core-prismeai-workspaces-models
      namespace: core
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 10Gi
      storageClassName: ''  # REQUIRED if global.storage.workspaces.driver is FILESYSTEM

########################################
# External/infra services configs

# Proxying, balancing, TLS
ingresses:
  # REQUIRED unless another load balancing method is configured
  - name: core-ingress
    annotations:
      # AWS ALB example :
      kubernetes.io/ingress.class: alb
      # alb.ingress.kubernetes.io/load-balancer-name: "alb-name"
      # alb.ingress.kubernetes.io/subnets: "target subnets"
      # alb.ingress.kubernetes.io/certificate-arn: 'arn:aws:acm:...'
      # alb.ingress.kubernetes.io/scheme: internet-facing
      # alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443},{"HTTP": 80}]'
      # alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    tls:
      - hosts:
          - "api.customer.prisme.ai"
          - "studio.customer.prisme.ai"
          - "*.pages.customer.prisme.ai"
        secretName: customer-tls
    rules:
      - host: api.customer.prisme.ai # Backend URL (api-gateway)
        http: &API_SERVICE
          paths:
            - path: "/"
              pathType: Prefix
              backend:
                service:
                  name: core-prismeai-api-gateway
                  port:
                    number: 80


      - host: studio.customer.prisme.ai # Studio URL
        http: &CONSOLE_SERVICE
          paths:
            - path: "/"
              pathType: Prefix
              backend:
                service:
                  name: core-prismeai-console
                  port:
                    number: 80

      - host: '*.pages.customer.prisme.ai'
        http:
          paths:
            - path: "/"
              pathType: Prefix
              backend:
                service:
                  name: core-prismeai-pages
                  port:
                    number: 80

# cert-manager
clusterissuer:
  enabled: false # Set this to true and configure below if you want certificates to be managed
  email: ''
  solvers:
    - dns01:
        webhook:
          groupName: ""
          solverName: solver
          config:
            apiKeySecretRef:
              key: api-token
              name: solver-credentials

# Secrets
generateSecrets:
  - name: internal-security
    data:
      apiKey:
        generate: true
  - name: oidc-provider
    data:
      clientRegistrationToken:
        generate: true
      studioClientId: 'prismeai-studio-client'
      studioClientSecret:
        generate: true
      cookiesSignSecret:
        generate: true
