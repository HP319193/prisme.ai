{{ if (not .Values.statefulset) }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name" . }}
  labels:
    {{- include "labels" . | nindent 4 }}
  namespace: {{ .Values.namespace | default .Release.Namespace }}

spec:
  {{ if not .Values.hpa.create }}
  replicas: {{ .Values.replicaCount }}
  {{ end }}
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate

  template:
    metadata:
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
        version: {{ .Values.image.tag | default .Chart.AppVersion | quote }}
    spec:
      imagePullSecrets:
        - name: {{ include "imagePullSecretName" . }}
      restartPolicy: {{ .Values.restartPolicy }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}

      serviceAccountName: {{ include "serviceAccountName" . }}

      # initContainers:
      #   - name: {{ include "name" . }}-init
      #     image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
      #   command:
      #   - /bin/bash
      #   - -c
      #   - |
      #     set -ex
      #     # Extract pod ordinal index from the hostname to generate the redis server-id.
      #     hostname_regex='-([0-9]+)$'
      #     if [[ `hostname` =~ ${hostname_regex} ]]; then
      #       ordinal=${BASH_REMATCH[1]}
      #     else
      #       exit 1
      #     fi

      #     # Copy the appropriate redis config files from the config map to their respective directories.
      #     config_map_path="/mnt"
      #     config_destination="/etc/redis-config.conf"

      #     if [[ ${ordinal} -eq 0 ]]; then
      #       cp "${config_map_path}/master.conf" "${config_destination}"
      #     else
      #       cp "${config_map_path}/slave.conf" "${config_destination}"
      #     fi
      #   volumeMounts:
      #   - name: redis-claim
      #     mountPath: /etc
      #   - name: config-map
      #     mountPath: /mnt/

      containers:
        - name: {{ include "name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.port }}
            name: redis
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command:
            - redis-stack-server
            - "/etc/redis-config.conf"
          volumeMounts:
          - name: redis-data
            mountPath: /var/lib/redis-stack
            subPath: 'redis-stack'
          - name: redis-config
            mountPath: /etc/redis-config.conf
            subPath: master.conf

      volumes:
        - name: redis-config
          configMap:
            name: {{ include "name" . }}-config
        - name: redis-data
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "name" .) }}

{{ if .Values.hpa.create }}

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "name" . }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "name" . }}
  minReplicas: {{ .Values.hpa.minReplicas }}
  maxReplicas:  {{ .Values.hpa.maxReplicas }}
  metrics:
    {{- toYaml .Values.hpa.metrics | nindent 4 }}

{{ end }}

{{ if .Values.autorestart.enabled }}

---

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "name" . }}-autorestart
  namespace: kube-system
spec:
  schedule: {{ .Values.autorestart.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: autorestart-sa
          containers:
            - name: autorestart
              image: lachlanevenson/k8s-kubectl:latest
              command:
                - /bin/sh
                - -c
                - kubectl -n {{ .Values.namespace | default .Release.Namespace }} rollout restart deploy/{{ include "name" . }}
          restartPolicy: OnFailure


{{ end }}


{{- end }}
