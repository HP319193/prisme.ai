image: node:16

variables:
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: "1"
  CONTAINER_BASE_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH

  CONSOLE_DIRECTORY: "console"
  CONSOLE_IMAGE_NAME: "prisme.ai-console"
  CONSOLE_K8S_NAME: "prismeai-console"

  WORKSPACES_DIRECTORY: "workspaces"
  WORKSPACES_IMAGE_NAME: "prisme.ai-workspaces"
  WORKSPACES_K8S_NAME: "prismeai-workspaces"

  API_GATEWAY_DIRECTORY: "api-gateway"
  API_GATEWAY_IMAGE_NAME: "prisme.ai-api-gateway"
  API_GATEWAY_K8S_NAME: "prismeai-api-gateway"

  RUNTIME_DIRECTORY: "runtime"
  RUNTIME_IMAGE_NAME: "prisme.ai-runtime"
  RUNTIME_K8S_NAME: "prismeai-runtime"

  EVENTS_DIRECTORY: "events"
  EVENTS_IMAGE_NAME: "prisme.ai-events"
  EVENTS_K8S_NAME: "prismeai-events"

stages:
  - dependencies
  - test
  - build_docker
  - deploy

# sast:
#   stage: test
# include:
#   - template: Security/SAST.gitlab-ci.yml

npm_install:
  stage: dependencies
  only:
    changes:
      - "package-lock.json"
      - "packages/**/*"
    refs:
      - main
      - /^feature\/.*$/
      - /^pipeline\/.*$/
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi

    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:latest || true
    - docker build . -f dependencies.dockerfile -t prisme.ai-dependencies -t $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:$FEATURE_TAG --cache-from $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:latest
    - docker push $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:$FEATURE_TAG

#### Parent jobs

.npm_test:
  interruptible: true
  stage: test
  script:
    - >
      if ! [[ -d node_modules/ ]] ; then
        BUILD_PACKAGES=0 npm ci
      fi
    - npm run build:packages
    - npm test --prefix $DIRECTORY
  coverage: '/All files\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)/'
  artifacts:
    paths:
      - coverage
  cache: &cache
    key:
      files: &lockFiles
        - package-lock.json
    paths:
      - node_modules/

.build_docker:
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi

    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $IMAGE_NAME:latest || true
    - docker build  --build-arg DEPENDENCIES_TAG=$FEATURE_TAG --cache-from $IMAGE_NAME:$FEATURE_TAG -t $IMAGE_NAME:$FEATURE_TAG . -f $DIRECTORY/Dockerfile
    - docker push $IMAGE_NAME:$FEATURE_TAG

.deploy_k8s:
  stage: deploy
  tags:
    - internal-runner
  image:
    name: registry.gitlab.com/gogowego-devsecops/dev/prisme.ai-infra:latest
    entrypoint: ["/bin/sh", "-c"]
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi
    - deploy $CI_COMMIT_BRANCH $K8S_NAME $IMAGE_NAME $FEATURE_TAG

## Console jobs
console_test:
  extends: .npm_test
  only:
    changes:
      - "services/console/**/*"
  before_script:
    - export DIRECTORY=services/$CONSOLE_DIRECTORY

console_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - main
      - master
      - /^feature\/.*$/
      - /^pipeline\/.*$/
    changes:
      - "services/console/**/*"
  before_script:
    - export DIRECTORY=services/$CONSOLE_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$CONSOLE_IMAGE_NAME

console_deploy:
  extends: .deploy_k8s
  only:
    refs:
      - main
      - master
      - /^feature\/.*$/
      - /^pipeline\/.*$/
    changes:
      - "services/console/**/*"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$CONSOLE_IMAGE_NAME
    - export K8S_NAME=$CONSOLE_K8S_NAME


# ## Workspaces jobs
# # workspaces_test:
# #   extends: .npm_test
# #   only:
# #     changes:
# #       - "services/workspaces/*"
# #   before_script:
# #     - export SERVICE_NAME=$WORKSPACES_DIRECTORY

workspaces_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/workspaces/**/*"
  before_script:
    - export DIRECTORY=services/$WORKSPACES_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$WORKSPACES_IMAGE_NAME

workspaces_deploy:
  extends: .deploy_k8s
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/workspaces/**/*"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$WORKSPACES_IMAGE_NAME
    - export K8S_NAME=$WORKSPACES_K8S_NAME

# ## Runtime jobs
runtime_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/runtime/**/*"
  before_script:
    - export DIRECTORY=services/$RUNTIME_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$RUNTIME_IMAGE_NAME

runtime_deploy:
  extends: .deploy_k8s
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/runtime/**/*"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$RUNTIME_IMAGE_NAME
    - export K8S_NAME=$RUNTIME_K8S_NAME


# ## API Gateway jobs
api-gateway_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/api-gateway/**/*"
  before_script:
    - export DIRECTORY=services/$API_GATEWAY_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$API_GATEWAY_IMAGE_NAME

api-gateway_deploy:
  extends: .deploy_k8s
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/api-gateway/**/*"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$API_GATEWAY_IMAGE_NAME
    - export K8S_NAME=$API_GATEWAY_K8S_NAME

# ## Events jobs
events_test:
  extends: .npm_test
  only:
    changes:
      - "services/events/**/*"
  before_script:
    - export DIRECTORY=services/$EVENTS_DIRECTORY

events_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/events/**/*"
  before_script:
    - export DIRECTORY=services/$EVENTS_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$EVENTS_IMAGE_NAME

events_deploy:
  extends: .deploy_k8s
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - "services/events/**/*"
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$EVENTS_IMAGE_NAME
    - export K8S_NAME=$EVENTS_K8S_NAME
