image: node:16

variables:
  DOCKER_DRIVER: overlay2
  GIT_DEPTH: '1'
  CONTAINER_BASE_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH

  CONSOLE_DIRECTORY: 'console'
  CONSOLE_IMAGE_NAME: 'prisme.ai-console'
  CONSOLE_K8S_NAME: 'prismeai-console'

  WORKSPACES_DIRECTORY: 'workspaces'
  WORKSPACES_IMAGE_NAME: 'prisme.ai-workspaces'
  WORKSPACES_K8S_NAME: 'prismeai-workspaces'

  API_GATEWAY_DIRECTORY: 'api-gateway'
  API_GATEWAY_IMAGE_NAME: 'prisme.ai-api-gateway'
  API_GATEWAY_K8S_NAME: 'prismeai-api-gateway'

  RUNTIME_DIRECTORY: 'runtime'
  RUNTIME_IMAGE_NAME: 'prisme.ai-runtime'
  RUNTIME_K8S_NAME: 'prismeai-runtime'

  EVENTS_DIRECTORY: 'events'
  EVENTS_IMAGE_NAME: 'prisme.ai-events'
  EVENTS_K8S_NAME: 'prismeai-events'

stages:
  - dependencies
  - test
  - build_docker
  - deploy
  - performance

# sast:
#   stage: test
# include:
#   - template: Security/SAST.gitlab-ci.yml

backend_npm_install:
  stage: dependencies
  only:
    changes:
      - 'services/api-gateway/package.json'
      - 'services/runtime/package.json'
      - 'services/workspaces/package.json'
      - 'services/events/package.json'
      - 'packages/**/*'
    refs:
      - main
      - /^feature\/.*$/
      - /^fix\/.*$/
      - /^pipeline\/.*$/
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi

    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:latest || true
    - docker build . -f dependencies.dockerfile -t prisme.ai-dependencies -t $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:$FEATURE_TAG --cache-from $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:latest
    - docker push $CONTAINER_BASE_IMAGE/prisme.ai-dependencies:$FEATURE_TAG

#### Parent jobs

.npm_test:
  stage: test
  script:
    - >
      if ! [[ -d node_modules/ ]] ; then
        BUILD_PACKAGES=0 npm ci
      fi
    - npm run build:packages
    - npm test -- $DIRECTORY
  coverage: '/All files\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)\s+\|\s+([\d\.]+)/'
  artifacts:
    paths:
      - coverage
  cache: &cache
    key:
      files: &lockFiles
        - package-lock.json
    paths:
      - node_modules/

.build_docker:
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi

    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $IMAGE_NAME:latest || true
    - docker build  --build-arg DEPENDENCIES_TAG=$FEATURE_TAG --cache-from $IMAGE_NAME:$FEATURE_TAG -t $IMAGE_NAME:$FEATURE_TAG . -f $DIRECTORY/Dockerfile
    - docker push $IMAGE_NAME:$FEATURE_TAG

.deploy_k8s:
  stage: deploy
  tags:
    - internal-runner
  image:
    name: registry.gitlab.com/gogowego-devsecops/dev/prisme.ai-infra:latest
    entrypoint: ['/bin/sh', '-c']
  script:
    - >
      if [ -z $CI_COMMIT_BRANCH ] || [ "$CI_COMMIT_BRANCH" == "main" ] || [ "$CI_COMMIT_BRANCH" == "master" ]; then
        export FEATURE_TAG=latest
      else
        export FEATURE_TAG=$(echo ${CI_COMMIT_BRANCH} | tr \/ -)
      fi
    - deploy $CI_COMMIT_BRANCH $K8S_NAME $IMAGE_NAME $FEATURE_TAG

## Console jobs
console_check:
  stage: test
  script:
    - >
      if ! [[ -d node_modules/ ]] ; then
        BUILD_PACKAGES=0 npm ci
      fi
    - npm run build:packages
    - npm run check:console
  needs: []
  only:
    changes:
      - 'services/console/**/*'
  before_script:
    - export DIRECTORY=services/$CONSOLE_DIRECTORY

console_test:
  extends: .npm_test
  needs: []
  only:
    changes:
      - 'services/console/**/*'
  before_script:
    - export DIRECTORY=services/$CONSOLE_DIRECTORY

console_build_docker:
  extends: .build_docker
  needs:
    - console_test
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - main
      - master
      - /^feature\/.*$/
      - /^pipeline\/.*$/
    changes:
      - 'services/console/**/*'
  before_script:
    - export DIRECTORY=services/$CONSOLE_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$CONSOLE_IMAGE_NAME

console_deploy:
  extends: .deploy_k8s
  needs:
    - console_build_docker
  only:
    refs:
      - main
      - master
      - /^feature\/.*$/
      - /^pipeline\/.*$/
    changes:
      - 'services/console/**/*'
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$CONSOLE_IMAGE_NAME
    - export K8S_NAME=$CONSOLE_K8S_NAME

# ## Workspaces jobs
workspaces_test:
  extends: .npm_test
  only:
    changes:
      - 'services/workspaces/*'
  before_script:
    - export DIRECTORY=services/$WORKSPACES_DIRECTORY

workspaces_build_docker:
  extends: .build_docker
  needs:
    - workspaces_test
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/workspaces/**/*'
  before_script:
    - export DIRECTORY=services/$WORKSPACES_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$WORKSPACES_IMAGE_NAME

workspaces_deploy:
  extends: .deploy_k8s
  needs:
    - workspaces_build_docker
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/workspaces/**/*'
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$WORKSPACES_IMAGE_NAME
    - export K8S_NAME=$WORKSPACES_K8S_NAME

# ## Runtime jobs
runtime_test:
  extends: .npm_test
  only:
    changes:
      - 'services/runtime/**/*'
  before_script:
    - export DIRECTORY=services/$RUNTIME_DIRECTORY

runtime_build_docker:
  extends: .build_docker
  needs:
    - runtime_test
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/runtime/**/*'
  before_script:
    - export DIRECTORY=services/$RUNTIME_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$RUNTIME_IMAGE_NAME

runtime_deploy:
  extends: .deploy_k8s
  needs:
    - runtime_build_docker
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/runtime/**/*'
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$RUNTIME_IMAGE_NAME
    - export K8S_NAME=$RUNTIME_K8S_NAME

# ## API Gateway jobs
api-gateway_build_docker:
  extends: .build_docker
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/api-gateway/**/*'
  before_script:
    - export DIRECTORY=services/$API_GATEWAY_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$API_GATEWAY_IMAGE_NAME

api-gateway_deploy:
  extends: .deploy_k8s
  needs:
    - api-gateway_build_docker
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/api-gateway/**/*'
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$API_GATEWAY_IMAGE_NAME
    - export K8S_NAME=$API_GATEWAY_K8S_NAME

# ## Events jobs
events_test:
  extends: .npm_test
  only:
    changes:
      - 'services/events/**/*'
  before_script:
    - export DIRECTORY=services/$EVENTS_DIRECTORY

events_build_docker:
  extends: .build_docker
  needs:
    - events_test
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  stage: build_docker
  image: docker:stable
  services:
    - docker:stable-dind
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/events/**/*'
  before_script:
    - export DIRECTORY=services/$EVENTS_DIRECTORY
    - export DOCKER_HOST=tcp://docker:2375
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$EVENTS_IMAGE_NAME

events_deploy:
  extends: .deploy_k8s
  needs:
    - events_build_docker
  only:
    refs:
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - main
      - master
    changes:
      - 'services/events/**/*'
  before_script:
    - export KUBECONFIG=$KUBECONFIG
    - export IMAGE_NAME=$CONTAINER_BASE_IMAGE/$EVENTS_IMAGE_NAME
    - export K8S_NAME=$EVENTS_K8S_NAME

# ## Docs jobs
docs_build_static:
  stage: build_docker
  needs: []
  interruptible: true # Stop this job if a new one has been triggered by the same branch
  only:
    refs:
      - main
      - master
      - /^feature\/.*$/
      - /^pipeline\/.*$/
      - /^doc\/.*$/
    changes:
      - 'docs/**/*'
      - 'specifications/*'
  image: python:latest
  script:
    - cp ./specifications/swagger.yml docs/public/api/swagger.yml
    - cd docs
    - apt-get update && apt-get install -y nodejs npm
    - npm ci
    - pip install mkdocs-material==6.2.5
    - bash ./build.sh all
  artifacts:
    paths:
      - docs/public

.s3_deploy:
  stage: deploy
  image: python:alpine
  before_script:
    - pip install awscli

docs_deploy:
  extends: .s3_deploy
  needs:
    - docs_build_static
  only:
    refs:
      - main
      - /^doc\/.*$/
    changes:
      - 'docs/**/*'
      - 'specifications/*'
  script:
    - aws s3 rm s3://$DOCS_S3_BUCKET_NAME --recursive
    - aws s3 cp docs/public/ s3://$DOCS_S3_BUCKET_NAME/ --recursive --include "*"
    - aws cloudfront create-invalidation --distribution-id $DOCS_CDN_DISTRIBUTION_ID --paths "/*"

load_performance:
  stage: performance
  when: manual
  image:
    name: loadimpact/k6:latest
    entrypoint: ['']
  variables:
    K6_TEST_FILE: scripts/loadPerformanceTesting.js
    K6_OPTIONS: ''
  script:
    - k6 run $K6_TEST_FILE --summary-export=load-performance.json $K6_OPTIONS
  artifacts:
    reports:
      load_performance: load-performance.json
